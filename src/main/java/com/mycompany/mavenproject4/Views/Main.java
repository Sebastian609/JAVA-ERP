/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject4.Views;
import javax.swing.UIManager;

import com.formdev.flatlaf.FlatLightLaf;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.mycompany.mavenproject4.controller.UserController;
import com.mycompany.mavenproject4.entities.User;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 *
 * @author sebav
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH); // Pantalla completa
        loadUsersTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnAdd = new javax.swing.JButton("Agregar");
        btnEdit = new javax.swing.JButton("Editar");
        btnDelete = new javax.swing.JButton("Eliminar");
        btnRefresh = new javax.swing.JButton("Refrescar");
        btnExportExcel = new javax.swing.JButton("Exportar a Excel");

        // Iconos simples
        btnAdd.setIcon(javax.swing.UIManager.getIcon("FileView.fileIcon"));
        btnEdit.setIcon(javax.swing.UIManager.getIcon("FileChooser.detailsViewIcon"));
        btnDelete.setIcon(javax.swing.UIManager.getIcon("OptionPane.errorIcon"));
        btnRefresh.setIcon(javax.swing.UIManager.getIcon("FileChooser.newFolderIcon"));
        btnExportExcel.setIcon(javax.swing.UIManager.getIcon("FileView.directoryIcon"));

        btnAdd.setToolTipText("Agregar usuario");
        btnEdit.setToolTipText("Editar usuario");
        btnDelete.setToolTipText("Eliminar usuario");
        btnRefresh.setToolTipText("Refrescar lista");
        btnExportExcel.setToolTipText("Exportar usuarios a Excel");

        btnAdd.addActionListener(e -> onAddUser());
        btnEdit.addActionListener(e -> onEditUser());
        btnDelete.addActionListener(e -> onDeleteUser());
        btnRefresh.addActionListener(e -> loadUsersTable());
        btnExportExcel.addActionListener(e -> exportToExcel());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        topPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));
        topPanel.add(btnAdd);
        topPanel.add(btnEdit);
        topPanel.add(btnDelete);
        topPanel.add(btnRefresh);
        topPanel.add(btnExportExcel);

        getContentPane().setLayout(new java.awt.BorderLayout());
        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private UserController userController = new UserController();

    private void loadUsersTable() {
        String[] columnNames = {"ID", "Rol", "Documento", "Nombre", "Apellido", "Email", "Activo"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            public boolean isCellEditable(int row, int column) { return false; }
        };
        java.util.List<User> users = userController.getAllUsers();
        for (User user : users) {
            if (user.getDeleted() != null && user.getDeleted()) continue;
            Object[] row = {
                user.getUserId(),
                user.getRolId() != null ? (user.getRolId() == 1 ? "Admin" : "Usuario") : "",
                user.getDocumentNumber(),
                user.getName(),
                user.getLastname(),
                user.getEmail(),
                user.getIsActive() != null && user.getIsActive() ? "Sí" : "No"
            };
            model.addRow(row);
        }
        usersTable = new JTable(model);
        usersTable.setFillsViewportHeight(true);
        usersTable.setRowHeight(24);
        usersTable.getTableHeader().setReorderingAllowed(false);
        if (scrollPane != null) {
            getContentPane().remove(scrollPane);
        }
        scrollPane = new JScrollPane(usersTable);
        getContentPane().add(scrollPane, java.awt.BorderLayout.CENTER);
        getContentPane().revalidate();
        getContentPane().repaint();
    }

    private User showUserForm(User user) {
        javax.swing.JPanel panel = new javax.swing.JPanel(new java.awt.GridLayout(0,2,10,10));
        String[] roles = {"Admin", "Usuario"};
        javax.swing.JComboBox<String> cbRol = new javax.swing.JComboBox<>(roles);
        if (user != null && user.getRolId() != null) cbRol.setSelectedIndex(user.getRolId() == 1 ? 0 : 1);
        javax.swing.JTextField tfDoc = new javax.swing.JTextField(user != null ? user.getDocumentNumber() : "");
        javax.swing.JTextField tfNombre = new javax.swing.JTextField(user != null ? user.getName() : "");
        javax.swing.JTextField tfApellido = new javax.swing.JTextField(user != null ? user.getLastname() : "");
        javax.swing.JTextField tfEmail = new javax.swing.JTextField(user != null ? user.getEmail() : "");
        javax.swing.JCheckBox cbActivo = null;
        javax.swing.JPasswordField pfPassword = null;
        javax.swing.JPasswordField pfConfirm = null;
        if (user == null) {
            pfPassword = new javax.swing.JPasswordField();
            pfConfirm = new javax.swing.JPasswordField();
        }
        if (user != null) {
            cbActivo = new javax.swing.JCheckBox("Activo", Boolean.TRUE.equals(user.getIsActive()));
        }
        javax.swing.JButton btnCambiarPass = null;
        if (user != null) {
            btnCambiarPass = new javax.swing.JButton("Cambiar contraseña...");
            btnCambiarPass.addActionListener(e -> showChangePasswordDialog(user));
        }
        panel.add(new javax.swing.JLabel("Rol:")); panel.add(cbRol);
        panel.add(new javax.swing.JLabel("Documento:")); panel.add(tfDoc);
        panel.add(new javax.swing.JLabel("Nombre:")); panel.add(tfNombre);
        panel.add(new javax.swing.JLabel("Apellido:")); panel.add(tfApellido);
        panel.add(new javax.swing.JLabel("Email:")); panel.add(tfEmail);
        if (user == null) {
            panel.add(new javax.swing.JLabel("Contraseña:")); panel.add(pfPassword);
            panel.add(new javax.swing.JLabel("Confirmar contraseña:")); panel.add(pfConfirm);
        }
        if (user != null) { panel.add(cbActivo); panel.add(btnCambiarPass); }
        while (true) {
            int result = JOptionPane.showConfirmDialog(this, panel, user == null ? "Agregar Usuario" : "Editar Usuario", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (result != JOptionPane.OK_OPTION) return null;
            // Validaciones
            String nombre = tfNombre.getText().trim();
            String apellido = tfApellido.getText().trim();
            String email = tfEmail.getText().trim();
            int rolId = cbRol.getSelectedIndex() == 0 ? 1 : 2;
            String password = null;
            if (user == null) {
                password = new String(pfPassword.getPassword());
                String confirm = new String(pfConfirm.getPassword());
                if (nombre.isEmpty() || apellido.isEmpty() || email.isEmpty() || password.isEmpty() || confirm.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Nombre, Apellido, Email y Contraseña son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                if (password.length() < 12) {
                    JOptionPane.showMessageDialog(this, "La contraseña debe tener al menos 12 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                if (!password.equals(confirm)) {
                    JOptionPane.showMessageDialog(this, "Las contraseñas no coinciden.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
            } else {
                if (nombre.isEmpty() || apellido.isEmpty() || email.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Nombre, Apellido y Email son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
            }
            if (!email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
                JOptionPane.showMessageDialog(this, "Email no válido.", "Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            User u = user != null ? user : new User();
            u.setRolId(rolId);
            u.setDocumentNumber(tfDoc.getText());
            u.setName(nombre);
            u.setLastname(apellido);
            u.setEmail(email);
            if (user == null) {
                u.setPassword(password);
                u.setIsActive(true);
                u.setDeleted(false);
            } else {
                u.setIsActive(cbActivo.isSelected());
            }
            return u;
        }
    }

    private void onAddUser() {
        User user = showUserForm(null);
        if (user != null) {
            userController.saveUser(user);
            JOptionPane.showMessageDialog(this, "Usuario agregado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            loadUsersTable();
        }
    }

    private void onDeleteUser() {
        int row = usersTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un usuario para eliminar.", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int userId = (int) usersTable.getValueAt(row, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "¿Eliminar usuario?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            userController.deleteUser(userId);
            JOptionPane.showMessageDialog(this, "Usuario eliminado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            loadUsersTable();
        }
    }

    private void onEditUser() {
        int row = usersTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un usuario para editar.", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int userId = (int) usersTable.getValueAt(row, 0);
        User user = userController.getUserById(userId);
        User updated = showUserForm(user);
        if (updated != null) {
            userController.updateUser(updated);
            JOptionPane.showMessageDialog(this, "Usuario actualizado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            loadUsersTable();
        }
    }

    private void exportToExcel() {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Usuarios");
        // Estilo para cabecera
        CellStyle headerStyle = workbook.createCellStyle();
        org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerFont.setColor(IndexedColors.WHITE.getIndex());
        headerStyle.setFont(headerFont);
        headerStyle.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex());
        headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        headerStyle.setBorderTop(BorderStyle.THIN);
        headerStyle.setBorderBottom(BorderStyle.THIN);
        headerStyle.setBorderLeft(BorderStyle.THIN);
        headerStyle.setBorderRight(BorderStyle.THIN);
        // Estilo para celdas normales
        CellStyle cellStyle = workbook.createCellStyle();
        cellStyle.setBorderTop(BorderStyle.THIN);
        cellStyle.setBorderBottom(BorderStyle.THIN);
        cellStyle.setBorderLeft(BorderStyle.THIN);
        cellStyle.setBorderRight(BorderStyle.THIN);
        // Encabezados
        String[] headers = {"ID", "Rol", "Documento", "Nombre", "Apellido", "Email", "Activo"};
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(headerStyle);
        }
        // Datos
        java.util.List<User> users = userController.getAllUsers();
        int rowIndex = 1;
        for (User user : users) {
            if (user.getDeleted() != null && user.getDeleted()) continue;
            Row row = sheet.createRow(rowIndex++);
            Cell c0 = row.createCell(0); c0.setCellValue(user.getUserId()); c0.setCellStyle(cellStyle);
            Cell c1 = row.createCell(1); c1.setCellValue(user.getRolId() != null ? (user.getRolId() == 1 ? "Admin" : "Usuario") : ""); c1.setCellStyle(cellStyle);
            Cell c2 = row.createCell(2); c2.setCellValue(user.getDocumentNumber() != null ? user.getDocumentNumber() : ""); c2.setCellStyle(cellStyle);
            Cell c3 = row.createCell(3); c3.setCellValue(user.getName() != null ? user.getName() : ""); c3.setCellStyle(cellStyle);
            Cell c4 = row.createCell(4); c4.setCellValue(user.getLastname() != null ? user.getLastname() : ""); c4.setCellStyle(cellStyle);
            Cell c5 = row.createCell(5); c5.setCellValue(user.getEmail() != null ? user.getEmail() : ""); c5.setCellStyle(cellStyle);
            Cell c6 = row.createCell(6); c6.setCellValue(user.getIsActive() != null && user.getIsActive() ? "Sí" : "No"); c6.setCellStyle(cellStyle);
        }
        for (int i = 0; i < headers.length; i++) {
            sheet.autoSizeColumn(i);
        }
        java.awt.Frame parent = (java.awt.Frame) javax.swing.SwingUtilities.getWindowAncestor(this);
        java.awt.FileDialog fd = new java.awt.FileDialog(parent, "Guardar como", java.awt.FileDialog.SAVE);
        fd.setFile("usuarios.xlsx");
        fd.setVisible(true);
        String file = fd.getFile();
        String dir = fd.getDirectory();
        if (file != null && dir != null) {
            try (FileOutputStream out = new FileOutputStream(dir + file)) {
                workbook.write(out);
                workbook.close();
                JOptionPane.showMessageDialog(this, "Reporte exportado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al exportar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void showChangePasswordDialog(User user) {
        javax.swing.JPanel panel = new javax.swing.JPanel(new java.awt.GridLayout(0,2,10,10));
        javax.swing.JPasswordField pfNew = new javax.swing.JPasswordField();
        javax.swing.JPasswordField pfConfirm = new javax.swing.JPasswordField();
        panel.add(new javax.swing.JLabel("Nueva contraseña:")); panel.add(pfNew);
        panel.add(new javax.swing.JLabel("Confirmar contraseña:")); panel.add(pfConfirm);
        int result = JOptionPane.showConfirmDialog(this, panel, "Cambiar contraseña", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            String newPass = new String(pfNew.getPassword());
            String confirm = new String(pfConfirm.getPassword());
            if (newPass.isEmpty() || confirm.isEmpty()) {
                JOptionPane.showMessageDialog(this, "La contraseña no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (newPass.length() < 12) {
                JOptionPane.showMessageDialog(this, "La contraseña debe tener al menos 12 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!newPass.equals(confirm)) {
                JOptionPane.showMessageDialog(this, "Las contraseñas no coinciden.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            user.setPassword(newPass);
            userController.updateUser(user);
            JOptionPane.showMessageDialog(this, "Contraseña actualizada.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // --- THIS IS THE ONLY PART YOU NEED TO CHANGE ---
        // Set the FlatLaf Dark look and feel
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }
        // ---------------------------------------------

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnExportExcel;
    private JTable usersTable;
    private JScrollPane scrollPane;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
